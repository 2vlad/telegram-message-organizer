'use client';

import { useEffect, useState, useCallback } from 'react';
import { Message } from 'telegram/tl/types';
import { MessageStorageService, ChatType } from '@/lib/messageStorage';
import { toast } from 'react-hot-toast';
import UnreadMessagesBanner from '@/components/UnreadMessagesBanner';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const messageStorage = new MessageStorageService();

export default function MessagesPage() {
  const [messages, setMessages] = useState<{
    personal: Message[];
    news: Message[];
    discussion: Message[];
  }>({
    personal: [],
    news: [],
    discussion: []
  });
  const [loading, setLoading] = useState<boolean>(true);
  const [activeTab, setActiveTab] = useState<'personal' | 'news' | 'discussion'>('news');
  const [unreadPersonalCount, setUnreadPersonalCount] = useState<number>(0);
  const [greeting, setGreeting] = useState<string>('Good morning');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const getMockMessages = async (): Promise<Message[]> => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—ã–ª–∏ –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram API
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–¥–∏–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —á–∞—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    return [
      // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      // –ò–º–∏—Ç–∞—Ü–∏—è —á–∞—Ç–æ–≤ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API —Ç–∏–ø—ã
      {
        id: 1,
        message: '–ó–∞ –ø—è—Ç—å –ª–µ—Ç –Ω–∏ —Ä–∞–∑—É –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –±—ã–ª–æ. –í –Ω–∞—á–∞–ª–µ –º–∞—Ä—Ç–∞ –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –≤–∏–∑–∞—Ä–∞–Ω–∞. –í—Å—ë –ø—Ä–æ—à–ª–æ –æ—Ç–ª–∏—á–Ω–æ.',
        date: Math.floor(Date.now() / 1000) - 3600,
        peer_id: { _: 'peerChannel', channel_id: 101 }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º peerChannel –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        from_id: { _: 'peerChannel', channel_id: 101 },
        peerId: {
          _: 'channel', // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø API –¥–ª—è –∫–∞–Ω–∞–ª–∞
          id: 101,
          title: '–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è üá≤üá™ TravelAsk',
          participants_count: 1000
        }
      },
      {
        id: 2,
        message: '–î–∞. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è). –≠—Ç–æ —Å–∞–º—ã–π —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ü–æ–ª—å–∑—É–µ–º—Å—è –∏–º —É–∂–µ –ø—è—Ç—å –ª–µ—Ç.',
        date: Math.floor(Date.now() / 1000) - 7200,
        peer_id: { _: 'peerChannel', channel_id: 101 },
        from_id: { _: 'peerChannel', channel_id: 101 },
        peerId: {
          _: 'channel',
          id: 101,
          title: '–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è üá≤üá™ TravelAsk',
          participants_count: 1000
        }
      },
      {
        id: 3,
        message: '–ê –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö —Å–ø–æ–∫–æ–π–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è ?',
        date: Math.floor(Date.now() / 1000) - 10800,
        peer_id: { _: 'peerChannel', channel_id: 101 },
        from_id: { _: 'peerChannel', channel_id: 101 },
        peerId: {
          _: 'channel',
          id: 101,
          title: '–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è üá≤üá™ TravelAsk',
          participants_count: 1000
        }
      },
      {
        id: 4,
        message: '–†–µ–±—è—Ç–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—Ç–æ-–Ω–∏–±—É–¥—å –∑–Ω–∞–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –≤ –ë–∞–Ω–≥–∫–æ–∫–µ —Å–¥–µ–ª–∞—Ç—å –≤–∏–∑—É –≤ –ö–∏—Ç–∞–π?',
        date: Math.floor(Date.now() / 1000) - 3600,
        peer_id: { _: 'peerChannel', channel_id: 102 },
        from_id: { _: 'peerChannel', channel_id: 102 },
        peerId: {
          _: 'channel',
          id: 102,
          title: '–ü–∞–Ω–≥–∞–∏ –ö–æ-Phangan',
          participants_count: 800
        }
      },
      {
        id: 5,
        message: 'Katerina –≤—ã–±–µ—Ä–∏—Ç–µ –ú–æ—Ä–∫–æ–≤—å',
        date: Math.floor(Date.now() / 1000) - 7200,
        peer_id: { _: 'peerChannel', channel_id: 102 },
        from_id: { _: 'peerChannel', channel_id: 102 },
        peerId: {
          _: 'channel',
          id: 102,
          title: '–ü–∞–Ω–≥–∞–∏ –ö–æ-Phangan',
          participants_count: 800
        }
      },
      {
        id: 6,
        message: '–ò–º–µ–Ω–Ω–æ –∞–≤—Ç–æ–±—É—Å –Ω—É–∂–µ–Ω? –ò–∑ –°—É—Ä–∞—Ç—Ç–∞–Ω–∏ —Å–∞–º–æ–ª–µ—Ç—ã –≤ –ë–∞–Ω–≥–∫–æ–∫ –ª–µ—Ç–∞—é—Ç –ø–ª—é—Å –º–∏–Ω—É—Å –ø–æ —Ü–µ–Ω–µ –∞–≤—Ç–æ–±—É—Å–∞',
        date: Math.floor(Date.now() / 1000) - 10800,
        peer_id: { _: 'peerChannel', channel_id: 102 },
        from_id: { _: 'peerChannel', channel_id: 102 },
        peerId: {
          _: 'channel',
          id: 102,
          title: '–ü–∞–Ω–≥–∞–∏ –ö–æ-Phangan',
          participants_count: 800
        }
      },
      {
        id: 7,
        message: '–û—Ç–ª–∏—á–Ω–æ —Ä–∞—Å—Ç–≤–æ—Ä—è—é—Ç—Å—è. –õ–∏—á–Ω–æ —è –∫–∏—Ç–∞–π—Ü–∞–º–∏ —Å—á–∏—Ç–∞—é —Ç–æ–ª—å–∫–æ –∫–∏—Ç–∞–π—Ü–µ–≤ –∏–∑ –ö–∏—Ç–∞—è, —á—Ç–æ –∂–∏–≤—É—Ç –≤ –ö–∏—Ç–∞–µ. –í–Ω–µ –ö–∏—Ç–∞—è –æ–Ω–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –º–µ–Ω—è—é—Ç—Å—è. –û–Ω–∏ –≤–æ–æ–±—â–µ –¥—Ä—É–≥–∏–µ. –û—Å–æ–±–µ–Ω–Ω–æ –≤ –°–®–ê',
        date: Math.floor(Date.now() / 1000) - 3600,
        peer_id: { _: 'peerChat', chat_id: 103 }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º peerChat –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
        from_id: { _: 'peerUser', user_id: 301 },
        peerId: {
          _: 'chat', // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø API –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
          id: 103,
          title: '–°–º—ã—Å–ª—ã —Å–∞–º–æ–æ—á–µ–≤–∏–¥–Ω–æ–≥–æ',
          participants_count: 50
        }
      },
      // –î–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      {
        id: 8,
        message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        date: Math.floor(Date.now() / 1000) - 1800,
        peer_id: { _: 'peerUser', user_id: 201 }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º peerUser –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        from_id: { _: 'peerUser', user_id: 201 },
        peerId: {
          _: 'user', // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          id: 201,
          first_name: '–ò–≤–∞–Ω',
          last_name: '–ü–µ—Ç—Ä–æ–≤',
          bot: false
        }
      },
      {
        id: 9,
        message: '–û—Ç–ª–∏—á–Ω–æ! –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞?',
        date: Math.floor(Date.now() / 1000) - 1700,
        peer_id: { _: 'peerUser', user_id: 201 },
        from_id: { _: 'peerUser', user_id: 12345 }, // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        peerId: {
          _: 'user',
          id: 201,
          first_name: '–ò–≤–∞–Ω',
          last_name: '–ü–µ—Ç—Ä–æ–≤',
          bot: false
        }
      },
      {
        id: 10,
        message: '–î–∞, –∫–æ–Ω–µ—á–Ω–æ! –í 15:00 —É –º–µ—Ç—Ä–æ?',
        date: Math.floor(Date.now() / 1000) - 1600,
        peer_id: { _: 'peerUser', user_id: 201 },
        from_id: { _: 'peerUser', user_id: 201 },
        peerId: {
          _: 'user',
          id: 201,
          first_name: '–ò–≤–∞–Ω',
          last_name: '–ü–µ—Ç—Ä–æ–≤',
          bot: false
        }
      }
    ] as unknown as Message[];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  const categorizeAndVerifyMessages = useCallback(() => {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messageStorage.recategorizeAllMessages();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const groupedMessages = messageStorage.getGroupedMessagesByCategory();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞ÔøΩÔøΩ–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const verifiedMessages = {
      personal: groupedMessages.personal.filter(msg => 
        messageStorage.verifyMessageCategory(msg, ChatType.PERSONAL)
      ),
      news: groupedMessages.news.filter(msg => 
        messageStorage.verifyMessageCategory(msg, ChatType.NEWS)
      ),
      discussion: groupedMessages.discussion.filter(msg => 
        messageStorage.verifyMessageCategory(msg, ChatType.DISCUSSION)
      )
    };
    
    return verifiedMessages;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const refreshMessages = useCallback(async () => {
    try {
      setLoading(true);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ Telegram API
      const mockMessages = await getMockMessages();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      messageStorage.addMessages(mockMessages);
      
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      const verifiedMessages = categorizeAndVerifyMessages();
      
      setMessages(verifiedMessages);
      toast.success('–°–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('Error refreshing messages:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
    } finally {
      setLoading(false);
    }
  }, [categorizeAndVerifyMessages]);

  useEffect(() => {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    const hour = new Date().getHours();
    if (hour >= 5 && hour < 12) {
      setGreeting('Good morning');
    } else if (hour >= 12 && hour < 18) {
      setGreeting('Good afternoon');
    } else {
      setGreeting('Good evening');
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram API
    const fetchMessages = async () => {
      try {
        setLoading(true);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messageStorage.setCurrentUserId(12345);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ Telegram API
        const mockMessages = await getMockMessages();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        messageStorage.addMessages(mockMessages);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messageStorage.recategorizeAllMessages();
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        const verifiedMessages = categorizeAndVerifyMessages();
        
        setMessages(verifiedMessages);

        // –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 56, –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        setUnreadPersonalCount(56);
      } catch (error) {
        console.error('Error fetching messages:', error);
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
      } finally {
        setLoading(false);
      }
    };

    fetchMessages();
  }, [categorizeAndVerifyMessages]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –±–∞–Ω–Ω–µ—Ä—É
  const handleBannerClick = () => {
    setActiveTab('personal');
    toast.success('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º');
  };

  // –†–µ–Ω–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
  const renderMessage = (message: Message) => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
    const chat = message.peerId as any;
    let chatTitle = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç';
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
    if (chat) {
      if (chat._ === 'user') {
        chatTitle = `${chat.first_name || ''} ${chat.last_name || ''}`.trim();
      } else if (chat.title) {
        chatTitle = chat.title;
      }
    }
    
    return (
      <div key={message.id} className="p-4 border rounded-lg mb-2 bg-white shadow-sm">
        <div className="font-medium text-gray-700 mb-1">{chatTitle}</div>
        <div className="font-medium">{message.message || '–ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç'}</div>
        <div className="text-sm text-gray-500 mt-1">
          {new Date((message.date || 0) * 1000).toLocaleString()}
        </div>
      </div>
    );
  };

  return (
    <div className="container mx-auto p-4">
      {/* –ë–∞–Ω–Ω–µ—Ä —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö */}
      {unreadPersonalCount > 0 && activeTab !== 'personal' && (
        <UnreadMessagesBanner 
          count={unreadPersonalCount} 
          greeting={greeting}
          onClick={handleBannerClick} 
        />
      )}
      
      {/* –¢–∞–±—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <div className="flex border-b mb-4">
        <button
          className={`py-2 px-4 relative ${activeTab === 'personal' ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-500'}`}
          onClick={() => setActiveTab('personal')}
        >
          Personal ({messages.personal.length})
          {unreadPersonalCount > 0 && activeTab !== 'personal' && (
            <span className="absolute top-0 right-0 bg-red-500 text-white text-xs font-bold rounded-full w-5 h-5 flex items-center justify-center">
              {unreadPersonalCount > 99 ? '99+' : unreadPersonalCount}
            </span>
          )}
        </button>
        <button
          className={`py-2 px-4 ${activeTab === 'news' ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-500'}`}
          onClick={() => setActiveTab('news')}
        >
          News ({messages.news.length})
        </button>
        <button
          className={`py-2 px-4 ${activeTab === 'discussion' ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-500'}`}
          onClick={() => setActiveTab('discussion')}
        >
          Discussions ({messages.discussion.length})
        </button>
      </div>
      
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      <div className="mt-4">
        {loading ? (
          <div className="flex justify-center items-center h-40">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          </div>
        ) : (
          <div>
            {activeTab === 'personal' && (
              <div>
                {messages.personal.length > 0 ? (
                  messages.personal.map(renderMessage)
                ) : (
                  <div className="text-center text-gray-500 py-8">No personal messages</div>
                )}
              </div>
            )}
            
            {activeTab === 'news' && (
              <div>
                {messages.news.length > 0 ? (
                  messages.news.map(renderMessage)
                ) : (
                  <div className="text-center text-gray-500 py-8">No news messages</div>
                )}
              </div>
            )}
            
            {activeTab === 'discussion' && (
              <div>
                {messages.discussion.length > 0 ? (
                  messages.discussion.map(renderMessage)
                ) : (
                  <div className="text-center text-gray-500 py-8">No discussion messages</div>
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div className="fixed bottom-4 right-4">
        <button
          onClick={refreshMessages}
          className="bg-blue-500 hover:bg-blue-600 text-white rounded-full p-3 shadow-lg"
          aria-label="Refresh messages"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
        </button>
      </div>
    </div>
  );
}